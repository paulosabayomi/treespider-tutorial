import { TChartHeadPointPosition, TColorSet, TElementCenterPositions, TEventType, THeadImageShape, THeadPointPosition, TLinkerCircleColor, TLinkerShape, TTreeToItemHierarchy } from "../types/utils";
import { IChartHead, ID3DataFormat, TChartHeadType, TLinkType } from "../types/MainTypes";
import TSElement from "../utils/ts-element.js";
import ColorHandler from "./colorHandler";
import * as d3 from "d3";
declare class ChartMainHelper {
    tree_data: Array<IChartHead>;
    handleCollapseChildren: (svgNode: any, id: string, clicked_pos: number) => void | undefined;
    center_elem: (rect: DOMRect, position?: TElementCenterPositions) => void;
    itemHierarchy: TTreeToItemHierarchy;
    tmp_tree_data: IChartHead[];
    tree_level_step: number;
    display_tree_in_step: boolean;
    auto_display_tree_in_step: boolean;
    link_point_position: {
        [key in THeadPointPosition]: Function;
    };
    inverse_link_point_position: {
        [key in THeadPointPosition]: string;
    };
    chartHeadWidth: number;
    chartHeadHeight: number;
    chartHeadLandscapeWidth: number;
    chartHeadLandscapeHeight: number;
    chartHeadRoundedWidth: number;
    chartHeadRoundedHeight: number;
    color_handler: ColorHandler;
    chart_head_type: TChartHeadType;
    show_chart_head_border: boolean;
    animation_rotation_speed: number;
    animation_rotation_interval: number;
    head_linker_thumb_circle_radius: number;
    linker_thumb_icon_color: TLinkerCircleColor;
    linker_thumb_shape: TLinkerShape;
    head_image_shape: THeadImageShape;
    head_image_surface_area: number;
    chart_head_bg: string;
    auto_set_chart_head_bg: boolean;
    emitEvent: (eventName: TEventType, data?: any, cancelable?: boolean) => boolean;
    tree_link_types: {
        curveBumpX: d3.CurveFactory;
        curveBumpY: d3.CurveFactory;
        curveBasisClosed: d3.CurveFactory;
        curveLinear: d3.CurveFactory;
        curveStep: d3.CurveFactory;
        curveStepAfter: d3.CurveFactory;
        curveStepBefore: d3.CurveFactory;
    };
    tree_link_type: TLinkType | undefined;
    rootWrapperContainer: HTMLElement | null;
    app_unique_id: string;
    app_root_unique_selector: string;
    constructor();
    createDynamicEl(): TSElement;
    splitStringIntoBatch(text: string, len: number): string[];
    get_user_initials(name: string): string;
    format_employee_name(name: string, length?: number): string[];
    private symbol_type;
    private get_page_body_bg;
    private get_chart_head_bg;
    private get_image_shape_spacing;
    makeHead(head_data: IChartHead, doubleVerticalPoints?: boolean, pointPosition?: TChartHeadPointPosition): d3.Selection<SVGSVGElement, undefined, null, undefined>;
    handleCenterHead(e: any): void;
    defaultHead(head_data: IChartHead, doubleVerticalPoints?: boolean, pointPosition?: TChartHeadPointPosition): d3.Selection<SVGSVGElement, undefined, null, undefined>;
    landscapeHead(head_data: IChartHead, doubleVerticalPoints?: boolean, pointPosition?: TChartHeadPointPosition): d3.Selection<SVGSVGElement, undefined, null, undefined>;
    roundedHead(head_data: IChartHead, doubleVerticalPoints?: boolean, pointPosition?: TChartHeadPointPosition): d3.Selection<SVGSVGElement, undefined, null, undefined>;
    add_linker(all_group: d3.Selection<SVGGElement, undefined, null, undefined>, has_parent: boolean, has_children: boolean, pointPosition: TChartHeadPointPosition, color_set: TColorSet, rect: d3.Selection<SVGRectElement, undefined, null, undefined>, svgNode: d3.Selection<SVGSVGElement, undefined, null, undefined>, head_data: IChartHead, doubleVerticalPoints: boolean): void;
    get_tree_items_hierarchy(parentId?: string, parent_index?: number, action?: {
        level?: number;
        item_id?: string;
        callbackFn: (item: IChartHead, level: number) => void;
    }): TTreeToItemHierarchy;
    get_second_ancestor_item(child_id: string): any;
    getElemRelPosInTree(el_id: string): number;
    set_tmp_tree_data(el_id?: string | undefined): void;
    getIsParentRootEl(parent_id: string): boolean;
    getIsElRootTreeChild(id: string): boolean;
    getRootTreeEl(): IChartHead | undefined;
    el_has_children(el_id: string, check_tmp_data?: boolean): boolean;
    get_children_down_to_level(el_id: string, level_limit: number, current_level?: number): IChartHead[];
    data_to_d3_format(parentId?: string, include_stat?: boolean): ID3DataFormat;
}
export default ChartMainHelper;
